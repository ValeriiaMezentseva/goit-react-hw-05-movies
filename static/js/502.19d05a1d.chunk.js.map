{"version":3,"file":"static/js/502.19d05a1d.chunk.js","mappings":"sQAEaA,EAAWC,EAAAA,EAAAA,GAAH,gJASRC,EAAWD,EAAAA,EAAAA,GAAH,iJAYRE,GANMF,EAAAA,EAAAA,IAAH,uFAMIA,EAAAA,EAAAA,EAAH,yFAMJG,EAAYH,EAAAA,EAAAA,EAAH,yG,mBC8BtB,EAnDa,WACT,OAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAWC,OATDC,EAAAA,EAAAA,YAAU,WACND,GAAW,GACPH,IACAK,EAAAA,EAAAA,IAAaL,GACRM,MAAK,SAAAC,GAAI,OAAIR,EAAQQ,EAAZ,IACTC,SAAQ,kBAAML,GAAW,EAAjB,GAEpB,GAAE,CAACH,IAEEF,EAIe,IAAhBA,EAAKW,QACV,oEAEE,0BACA,SAACjB,EAAD,UACGM,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,GAAlC,OACR,UAACpB,EAAD,YACE,gBACQqB,IAAKJ,EAAY,yCAAqCA,GAAiBK,EACvEC,IAAKL,EACLM,MAAO,IACPC,OAAQ,IAEdjB,QAAQ,UAEN,SAACP,EAAD,UAAOiB,KACN,UAAChB,EAAD,yBACWiB,GAAwB,sBAX3BC,EADP,SARP,8BAAGZ,IAAW,SAACkB,EAAA,EAAD,KA2BxB,C,mMChDKC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BtB,GAA5B,gFACGuB,EADH,6CAC+CvB,EAD/C,oBACkEqB,EADlE,qCAGgBG,EAAAA,EAAAA,IAAUD,GAH1B,cAGGE,EAHH,yBAIIA,EAAKlB,MAJT,0IAUA,SAAemB,IAAtB,4CAAO,OAAP,oBAAO,6FACGH,EADH,mEACqEF,GADrE,kBAGoBG,EAAAA,EAAAA,IAAUD,GAH9B,cAGOE,EAHP,yBAIQA,EAAKlB,KAAKoB,SAJlB,0IAUA,SAAetB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BL,GAA5B,gFACIuB,EADJ,6CACgDvB,EADhD,4BAC2EqB,EAD3E,qCAGgBG,EAAAA,EAAAA,IAAUD,GAH1B,cAGGE,EAHH,yBAIIA,EAAKlB,KAAKT,MAJd,0IAUA,SAAe8B,EAAtB,+CAAO,OAAP,oBAAO,WAA+B5B,GAA/B,yFAEYuB,EAFZ,6CAEwDvB,EAFxD,4BAEmFqB,EAFnF,4BAGgBG,EAAAA,EAAAA,IAAUD,GAH1B,cAGGE,EAHH,yBAIIA,EAAKlB,KAAKoB,SAJd,0IAUA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,yFAEGP,EAFH,4DAE8DF,EAF9D,kBAE+ES,EAF/E,iCAGgBN,EAAAA,EAAAA,IAAUD,GAH1B,cAGGE,EAHH,yBAIIA,EAAKlB,KAAKoB,SAJd,0I","sources":["components/MovieCast/MovieCast.styled.jsx","components/MovieCast/MovieCast.jsx","services/api.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const CastList = styled.ul`\nlist-style: none; \n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 12px;\n  padding: 20px 0;\n`;\n\nexport const CastItem = styled.li`\nborder: 2px solid black; \npadding: 5px;\nbox-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n`;\n\nexport const Img = styled.img`\n  height: 160px;\n  object-fit: cover;\n  margin-bottom: 8px;\n`;\n\nexport const Name = styled.p`\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 8px;\n`;\n\nexport const Character = styled.p`\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 8px;\n  width: 200px;\n`;\n","import { useState, useEffect } from \"react\";\nimport { getMovieCast } from \"services/api\";\nimport { useParams } from \"react-router-dom\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { CastList, CastItem, Name, Character } from \"./MovieCast.styled\";\nimport noPoster from '../../images/no-poster.jpeg';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n    const [cast, setCast] = useState(null);\n    const { movieId } = useParams(); \n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        setLoading(true);\n        if (movieId) {\n            getMovieCast(movieId)\n                .then(data => setCast(data))\n                .finally(() => setLoading(false));\n        }\n    }, [movieId]);\n\n     if (!cast) {\n    return <>{loading && <Loader />}</>;\n  }\n    \n  return cast.length === 0 ? (\n    <p>We dont't have any cast for this movie.</p>\n  ) : (\n      <div>\n      <CastList>\n        {cast.map(({ profile_path, name, character, id }) => (\n          <CastItem key={id}>\n            <img\n                    src={profile_path ? `https://image.tmdb.org/t/p/w200${profile_path}` : noPoster }\n                    alt={name}\n                    width={200}\n                    height={300}\n                    \n              loading=\"lazy\"\n                />\n                <Name>{name}</Name>\n                 <Character>\n                Character: {character ? character : 'No information'}\n                    </Character>\n          </CastItem>\n        ))}\n      </CastList>\n    </div>\n  );\n};\n\nCast.propTypes = {\n  name: PropTypes.string,\n  character: PropTypes.string,\n  profile_path: PropTypes.string,\n  id: PropTypes.string,\n};\n\nexport default Cast;","import axios from \"axios\";\n\nconst API_KEY = 'a672ae57e08bb16567badfa77d9e520f'; \n\nexport async function getMovieById(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getTrendingMovies() {\n    const url = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}`;\n    try {\n        const resp = await axios.get(url);\n        return resp.data.results;\n    } catch (error) {\n        return; \n    }   \n};\n\nexport async function getMovieCast(movieId) {\n     const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n      try {\n    const resp = await axios.get(url);\n    return resp.data.cast;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getMovieReviews(movieId) {\n  try {\n             const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n};\n\nexport async function getSearchedMovie(query) {\n  try {\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`;\n    const resp = await axios.get(url);\n    return resp.data.results;\n  } catch (error) {\n    return;\n  }\n}"],"names":["CastList","styled","CastItem","Name","Character","useState","cast","setCast","movieId","useParams","loading","setLoading","useEffect","getMovieCast","then","data","finally","length","map","profile_path","name","character","id","src","noPoster","alt","width","height","Loader","API_KEY","getMovieById","url","axios","resp","getTrendingMovies","results","getMovieReviews","getSearchedMovie","query"],"sourceRoot":""}